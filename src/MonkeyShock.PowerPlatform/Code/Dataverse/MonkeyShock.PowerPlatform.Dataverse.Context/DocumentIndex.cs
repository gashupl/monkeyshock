//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MonkeyShock.PowerPlatform.Dataverse.Context
{
	
	/// <summary>
	/// Article indexed for search purposes.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("documentindex")]
	public partial class DocumentIndex : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentId = "documentid";
			public const string DocumentIndexId = "documentindexid";
			public const string Id = "documentindexid";
			public const string DocumentTypeCode = "documenttypecode";
			public const string IsLatestVersion = "islatestversion";
			public const string IsPublished = "ispublished";
			public const string KeyWords = "keywords";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Number = "number";
			public const string OrganizationId = "organizationid";
			public const string SearchText = "searchtext";
			public const string SubjectId = "subjectid";
			public const string Title = "title";
			public const string VersionNumber = "versionnumber";
			public const string is_primary_subject_for = "is_primary_subject_for";
			public const string KbArticle_DocumentIndex = "KbArticle_DocumentIndex";
			public const string knowledgearticle_documentindex = "knowledgearticle_documentindex";
			public const string lk_documentindex_createdby = "lk_documentindex_createdby";
			public const string lk_documentindex_createdonbehalfby = "lk_documentindex_createdonbehalfby";
			public const string lk_documentindex_modifiedby = "lk_documentindex_modifiedby";
			public const string lk_documentindex_modifiedonbehalfby = "lk_documentindex_modifiedonbehalfby";
			public const string organization_indexed_documents = "organization_indexed_documents";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public DocumentIndex() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "documentindex";
		
		public const string EntitySchemaName = "DocumentIndex";
		
		public const string PrimaryIdAttribute = "documentindexid";
		
		public const string PrimaryNameAttribute = "title";
		
		public const string EntityLogicalCollectionName = "documentindexes";
		
		public const string EntitySetName = "documentindexes";
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the indexed article.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		/// <summary>
		/// Date and time when the indexed article was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who created the documentindex.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CreatedOnBehalfBy");
				this.SetAttributeValue("createdonbehalfby", value);
				this.OnPropertyChanged("CreatedOnBehalfBy");
			}
		}
		
		/// <summary>
		/// Choose the parent article for the document index item. The ID links the index to article information such as the article number, title, and keywords.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("documentid")]
		public Microsoft.Xrm.Sdk.EntityReference DocumentId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("documentid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DocumentId");
				this.SetAttributeValue("documentid", value);
				this.OnPropertyChanged("DocumentId");
			}
		}
		
		/// <summary>
		/// Unique identifier of the indexed article.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("documentindexid")]
		public System.Nullable<System.Guid> DocumentIndexId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("documentindexid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DocumentIndexId");
				this.SetAttributeValue("documentindexid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("DocumentIndexId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("documentindexid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.DocumentIndexId = value;
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("documenttypecode")]
		public Microsoft.Xrm.Sdk.OptionSetValue DocumentTypeCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("documenttypecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DocumentTypeCode");
				this.SetAttributeValue("documenttypecode", value);
				this.OnPropertyChanged("DocumentTypeCode");
			}
		}
		
		/// <summary>
		/// Shows which version of the knowledge article is the latest version.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("islatestversion")]
		public System.Nullable<bool> IsLatestVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("islatestversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsLatestVersion");
				this.SetAttributeValue("islatestversion", value);
				this.OnPropertyChanged("IsLatestVersion");
			}
		}
		
		/// <summary>
		/// Tells whether the parent knowledge base article is published in Microsoft Dynamics 365, so that the keywords and article content are added to the search index.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ispublished")]
		public System.Nullable<bool> IsPublished
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ispublished");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsPublished");
				this.SetAttributeValue("ispublished", value);
				this.OnPropertyChanged("IsPublished");
			}
		}
		
		/// <summary>
		/// Type the keywords for the article. The keywords are updated in the search index every time the article is published.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("keywords")]
		public string KeyWords
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("keywords");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("KeyWords");
				this.SetAttributeValue("keywords", value);
				this.OnPropertyChanged("KeyWords");
			}
		}
		
		/// <summary>
		/// For system use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("location")]
		public string Location
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("location");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Location");
				this.SetAttributeValue("location", value);
				this.OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the indexed article.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		/// <summary>
		/// Date and time when the indexed article was last modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who last modified the documentindex.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ModifiedOnBehalfBy");
				this.SetAttributeValue("modifiedonbehalfby", value);
				this.OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("number")]
		public string Number
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("number");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Number");
				this.SetAttributeValue("number", value);
				this.OnPropertyChanged("Number");
			}
		}
		
		/// <summary>
		/// Choose the ID of the organization that the record is associated with.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		public Microsoft.Xrm.Sdk.EntityReference OrganizationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("searchtext")]
		public string SearchText
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("searchtext");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SearchText");
				this.SetAttributeValue("searchtext", value);
				this.OnPropertyChanged("SearchText");
			}
		}
		
		/// <summary>
		/// Shows the subject record selected on the parent knowledge base article. The ID is updated in the search index every time the article is published.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subjectid")]
		public Microsoft.Xrm.Sdk.EntityReference SubjectId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("subjectid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SubjectId");
				this.SetAttributeValue("subjectid", value);
				this.OnPropertyChanged("SubjectId");
			}
		}
		
		/// <summary>
		/// Type the title of the parent knowledge base article. This is updated in the search index every time the article is published.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("title")]
		public string Title
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("title");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Title");
				this.SetAttributeValue("title", value);
				this.OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N userentityinstancedata_documentindex
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("userentityinstancedata_documentindex")]
		public System.Collections.Generic.IEnumerable<MonkeyShock.PowerPlatform.Dataverse.Context.UserEntityInstanceData> userentityinstancedata_documentindex
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<MonkeyShock.PowerPlatform.Dataverse.Context.UserEntityInstanceData>("userentityinstancedata_documentindex", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("userentityinstancedata_documentindex");
				this.SetRelatedEntities<MonkeyShock.PowerPlatform.Dataverse.Context.UserEntityInstanceData>("userentityinstancedata_documentindex", null, value);
				this.OnPropertyChanged("userentityinstancedata_documentindex");
			}
		}
		
		/// <summary>
		/// N:1 is_primary_subject_for
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("is_primary_subject_for")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.Subject is_primary_subject_for
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.Subject>("is_primary_subject_for", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("is_primary_subject_for");
				this.SetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.Subject>("is_primary_subject_for", null, value);
				this.OnPropertyChanged("is_primary_subject_for");
			}
		}
		
		/// <summary>
		/// N:1 KbArticle_DocumentIndex
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("documentid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("KbArticle_DocumentIndex")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.KbArticle KbArticle_DocumentIndex
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.KbArticle>("KbArticle_DocumentIndex", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("KbArticle_DocumentIndex");
				this.SetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.KbArticle>("KbArticle_DocumentIndex", null, value);
				this.OnPropertyChanged("KbArticle_DocumentIndex");
			}
		}
		
		/// <summary>
		/// N:1 knowledgearticle_documentindex
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("documentid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("knowledgearticle_documentindex")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.KnowledgeArticle knowledgearticle_documentindex
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.KnowledgeArticle>("knowledgearticle_documentindex", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("knowledgearticle_documentindex");
				this.SetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.KnowledgeArticle>("knowledgearticle_documentindex", null, value);
				this.OnPropertyChanged("knowledgearticle_documentindex");
			}
		}
		
		/// <summary>
		/// N:1 lk_documentindex_createdby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_documentindex_createdby")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser lk_documentindex_createdby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser>("lk_documentindex_createdby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_documentindex_createdonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_documentindex_createdonbehalfby")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser lk_documentindex_createdonbehalfby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser>("lk_documentindex_createdonbehalfby", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("lk_documentindex_createdonbehalfby");
				this.SetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser>("lk_documentindex_createdonbehalfby", null, value);
				this.OnPropertyChanged("lk_documentindex_createdonbehalfby");
			}
		}
		
		/// <summary>
		/// N:1 lk_documentindex_modifiedby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_documentindex_modifiedby")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser lk_documentindex_modifiedby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser>("lk_documentindex_modifiedby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_documentindex_modifiedonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_documentindex_modifiedonbehalfby")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser lk_documentindex_modifiedonbehalfby
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser>("lk_documentindex_modifiedonbehalfby", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("lk_documentindex_modifiedonbehalfby");
				this.SetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.SystemUser>("lk_documentindex_modifiedonbehalfby", null, value);
				this.OnPropertyChanged("lk_documentindex_modifiedonbehalfby");
			}
		}
		
		/// <summary>
		/// N:1 organization_indexed_documents
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("organization_indexed_documents")]
		public MonkeyShock.PowerPlatform.Dataverse.Context.Organization organization_indexed_documents
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<MonkeyShock.PowerPlatform.Dataverse.Context.Organization>("organization_indexed_documents", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public DocumentIndex(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["documentindexid"] = base.Id;
                        break;
                    case "documentindexid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}