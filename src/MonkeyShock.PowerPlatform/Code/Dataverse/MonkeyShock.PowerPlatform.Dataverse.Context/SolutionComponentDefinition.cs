//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MonkeyShock.PowerPlatform.Dataverse.Context
{
	
	/// <summary>
	/// Contains all the information required to process a solution aware entity
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponentdefinition")]
	public partial class SolutionComponentDefinition : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string AllowDeleteBaseSolutionRowAndFakeDelete = "allowdeletebasesolutionrowandfakedelete";
			public const string AllowOverwriteCustomizations = "allowoverwritecustomizations";
			public const string AllowRecreateForLogicallyDeletedRow = "allowrecreateforlogicallydeletedrow";
			public const string AlwaysRemoveActiveCustomizationsOnUninstall = "alwaysremoveactivecustomizationsonuninstall";
			public const string CanBeAddedToSolutionComponents = "canbeaddedtosolutioncomponents";
			public const string CanBeHidden = "canbehidden";
			public const string ComponentState = "componentstate";
			public const string ComponentXPath = "componentxpath";
			public const string DescendentIsViewableComponent = "descendentisviewablecomponent";
			public const string GroupParentComponentAttributeName = "groupparentcomponentattributename";
			public const string GroupParentComponentType = "groupparentcomponenttype";
			public const string HasIsRenameableAttribute = "hasisrenameableattribute";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsDependencyDisabled = "isdependencydisabled";
			public const string IsDisplayable = "isdisplayable";
			public const string IsManaged = "ismanaged";
			public const string IsMergeable = "ismergeable";
			public const string IsMetadata = "ismetadata";
			public const string IsViewable = "isviewable";
			public const string LabelTypeCode = "labeltypecode";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string ParentAttributeName = "parentattributename";
			public const string PrimaryEntityName = "primaryentityname";
			public const string RemoveActiveCustomizationsBehavior = "removeactivecustomizationsbehavior";
			public const string RootAttributeName = "rootattributename";
			public const string RootComponent = "rootcomponent";
			public const string SolutionComponentDefinitionId = "solutioncomponentdefinitionid";
			public const string Id = "solutioncomponentdefinitionid";
			public const string SolutionComponentDefinitionIdUnique = "solutioncomponentdefinitionidunique";
			public const string SolutionComponentType = "solutioncomponenttype";
			public const string SolutionId = "solutionid";
			public const string UseForceDeleteForSolutionUpdate = "useforcedeleteforsolutionupdate";
			public const string UseForceUpdateAlways = "useforceupdatealways";
			public const string UseSentinelRowInBaseSolution = "usesentinelrowinbasesolution";
			public const string ViewableDescendentComponentType = "viewabledescendentcomponenttype";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public SolutionComponentDefinition() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "solutioncomponentdefinition";
		
		public const string EntitySchemaName = "SolutionComponentDefinition";
		
		public const string PrimaryIdAttribute = "solutioncomponentdefinitionid";
		
		public const string PrimaryNameAttribute = "name";
		
		public const string EntityLogicalCollectionName = "solutioncomponentdefinitions";
		
		public const string EntitySetName = "solutioncomponentdefinitions";
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Boolean identifier for using deleting base layers.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("allowdeletebasesolutionrowandfakedelete")]
		public System.Nullable<bool> AllowDeleteBaseSolutionRowAndFakeDelete
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("allowdeletebasesolutionrowandfakedelete");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AllowDeleteBaseSolutionRowAndFakeDelete");
				this.SetAttributeValue("allowdeletebasesolutionrowandfakedelete", value);
				this.OnPropertyChanged("AllowDeleteBaseSolutionRowAndFakeDelete");
			}
		}
		
		/// <summary>
		/// Whether this component allows Overwrite Customizations when update managed solution
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("allowoverwritecustomizations")]
		public System.Nullable<bool> AllowOverwriteCustomizations
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("allowoverwritecustomizations");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AllowOverwriteCustomizations");
				this.SetAttributeValue("allowoverwritecustomizations", value);
				this.OnPropertyChanged("AllowOverwriteCustomizations");
			}
		}
		
		/// <summary>
		/// Boolean identifier for a row that is marked as logically deleted in the Active solution and should be re-created back
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("allowrecreateforlogicallydeletedrow")]
		public System.Nullable<bool> AllowRecreateForLogicallyDeletedRow
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("allowrecreateforlogicallydeletedrow");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AllowRecreateForLogicallyDeletedRow");
				this.SetAttributeValue("allowrecreateforlogicallydeletedrow", value);
				this.OnPropertyChanged("AllowRecreateForLogicallyDeletedRow");
			}
		}
		
		/// <summary>
		/// Flag used to indicate whether this component always removes active customizations on uninstall
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("alwaysremoveactivecustomizationsonuninstall")]
		public System.Nullable<bool> AlwaysRemoveActiveCustomizationsOnUninstall
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("alwaysremoveactivecustomizationsonuninstall");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("AlwaysRemoveActiveCustomizationsOnUninstall");
				this.SetAttributeValue("alwaysremoveactivecustomizationsonuninstall", value);
				this.OnPropertyChanged("AlwaysRemoveActiveCustomizationsOnUninstall");
			}
		}
		
		/// <summary>
		/// Flag indicating whether the subcomponent can be added directly to the SolutionComponents table
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canbeaddedtosolutioncomponents")]
		public System.Nullable<bool> CanBeAddedToSolutionComponents
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("canbeaddedtosolutioncomponents");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CanBeAddedToSolutionComponents");
				this.SetAttributeValue("canbeaddedtosolutioncomponents", value);
				this.OnPropertyChanged("CanBeAddedToSolutionComponents");
			}
		}
		
		/// <summary>
		/// Whether this component is hidden using an IsHidden managed property
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("canbehidden")]
		public System.Nullable<bool> CanBeHidden
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("canbehidden");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CanBeHidden");
				this.SetAttributeValue("canbehidden", value);
				this.OnPropertyChanged("CanBeHidden");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
		public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componentstate");
			}
		}
		
		/// <summary>
		/// Path to component's XML node
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentxpath")]
		public string ComponentXPath
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("componentxpath");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ComponentXPath");
				this.SetAttributeValue("componentxpath", value);
				this.OnPropertyChanged("ComponentXPath");
			}
		}
		
		/// <summary>
		/// Flag that indicates whether this component uses its descendent as its viewable component
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("descendentisviewablecomponent")]
		public System.Nullable<bool> DescendentIsViewableComponent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("descendentisviewablecomponent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DescendentIsViewableComponent");
				this.SetAttributeValue("descendentisviewablecomponent", value);
				this.OnPropertyChanged("DescendentIsViewableComponent");
			}
		}
		
		/// <summary>
		/// Group Parent Component Attribute Name
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("groupparentcomponentattributename")]
		public string GroupParentComponentAttributeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("groupparentcomponentattributename");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("GroupParentComponentAttributeName");
				this.SetAttributeValue("groupparentcomponentattributename", value);
				this.OnPropertyChanged("GroupParentComponentAttributeName");
			}
		}
		
		/// <summary>
		/// Group Parent Component Type
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("groupparentcomponenttype")]
		public System.Nullable<int> GroupParentComponentType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("groupparentcomponenttype");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("GroupParentComponentType");
				this.SetAttributeValue("groupparentcomponenttype", value);
				this.OnPropertyChanged("GroupParentComponentType");
			}
		}
		
		/// <summary>
		/// Boolean that indicates if the component has a renamable attribute
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("hasisrenameableattribute")]
		public System.Nullable<bool> HasIsRenameableAttribute
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("hasisrenameableattribute");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("HasIsRenameableAttribute");
				this.SetAttributeValue("hasisrenameableattribute", value);
				this.OnPropertyChanged("HasIsRenameableAttribute");
			}
		}
		
		/// <summary>
		/// Unique identifier of the data import or data migration that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ImportSequenceNumber");
				this.SetAttributeValue("importsequencenumber", value);
				this.OnPropertyChanged("ImportSequenceNumber");
			}
		}
		
		/// <summary>
		/// Version in which the component is introduced.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("introducedversion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IntroducedVersion");
				this.SetAttributeValue("introducedversion", value);
				this.OnPropertyChanged("IntroducedVersion");
			}
		}
		
		/// <summary>
		/// Is dependency disabled for the component
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isdependencydisabled")]
		public System.Nullable<bool> IsDependencyDisabled
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isdependencydisabled");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsDependencyDisabled");
				this.SetAttributeValue("isdependencydisabled", value);
				this.OnPropertyChanged("IsDependencyDisabled");
			}
		}
		
		/// <summary>
		/// Boolean that indicates if the component has user interface enabled
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isdisplayable")]
		public System.Nullable<bool> IsDisplayable
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isdisplayable");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsDisplayable");
				this.SetAttributeValue("isdisplayable", value);
				this.OnPropertyChanged("IsDisplayable");
			}
		}
		
		/// <summary>
		/// Boolean that indicates if the component is managed
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
		public System.Nullable<bool> IsManaged
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsManaged");
				this.SetAttributeValue("ismanaged", value);
				this.OnPropertyChanged("IsManaged");
			}
		}
		
		/// <summary>
		/// Whether this component is either a mergeable component, or part of a mergeable component
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismergeable")]
		public System.Nullable<bool> IsMergeable
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismergeable");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsMergeable");
				this.SetAttributeValue("ismergeable", value);
				this.OnPropertyChanged("IsMergeable");
			}
		}
		
		/// <summary>
		/// Boolean identifier for metadata components
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismetadata")]
		public System.Nullable<bool> IsMetadata
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismetadata");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsMetadata");
				this.SetAttributeValue("ismetadata", value);
				this.OnPropertyChanged("IsMetadata");
			}
		}
		
		/// <summary>
		/// Whether this component is viewable in the SDK and UI
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isviewable")]
		public System.Nullable<bool> IsViewable
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isviewable");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("IsViewable");
				this.SetAttributeValue("isviewable", value);
				this.OnPropertyChanged("IsViewable");
			}
		}
		
		/// <summary>
		/// Label Type Code
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("labeltypecode")]
		public System.Nullable<int> LabelTypeCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("labeltypecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("LabelTypeCode");
				this.SetAttributeValue("labeltypecode", value);
				this.OnPropertyChanged("LabelTypeCode");
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
		public string Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Object Type Code
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("objecttypecode")]
		public System.Nullable<int> ObjectTypeCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("objecttypecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ObjectTypeCode");
				this.SetAttributeValue("objecttypecode", value);
				this.OnPropertyChanged("ObjectTypeCode");
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("OverriddenCreatedOn");
				this.SetAttributeValue("overriddencreatedon", value);
				this.OnPropertyChanged("OverriddenCreatedOn");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
		public System.Nullable<System.DateTime> OverwriteTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// The attribute name of the parent attribute
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentattributename")]
		public string ParentAttributeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("parentattributename");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ParentAttributeName");
				this.SetAttributeValue("parentattributename", value);
				this.OnPropertyChanged("ParentAttributeName");
			}
		}
		
		/// <summary>
		/// Component Entity Logical Name
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("primaryentityname")]
		public string PrimaryEntityName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("primaryentityname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("PrimaryEntityName");
				this.SetAttributeValue("primaryentityname", value);
				this.OnPropertyChanged("PrimaryEntityName");
			}
		}
		
		/// <summary>
		/// Remove Active Customizations Behavior.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("removeactivecustomizationsbehavior")]
		public Microsoft.Xrm.Sdk.OptionSetValue RemoveActiveCustomizationsBehavior
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("removeactivecustomizationsbehavior");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RemoveActiveCustomizationsBehavior");
				this.SetAttributeValue("removeactivecustomizationsbehavior", value);
				this.OnPropertyChanged("RemoveActiveCustomizationsBehavior");
			}
		}
		
		/// <summary>
		/// Root Solution Component Type Name
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rootattributename")]
		public string RootAttributeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("rootattributename");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RootAttributeName");
				this.SetAttributeValue("rootattributename", value);
				this.OnPropertyChanged("RootAttributeName");
			}
		}
		
		/// <summary>
		/// Root Solution Component Type
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rootcomponent")]
		public System.Nullable<int> RootComponent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("rootcomponent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("RootComponent");
				this.SetAttributeValue("rootcomponent", value);
				this.OnPropertyChanged("RootComponent");
			}
		}
		
		/// <summary>
		/// Unique identifier of the solution component definition
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutioncomponentdefinitionid")]
		public System.Nullable<System.Guid> SolutionComponentDefinitionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutioncomponentdefinitionid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SolutionComponentDefinitionId");
				this.SetAttributeValue("solutioncomponentdefinitionid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("SolutionComponentDefinitionId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutioncomponentdefinitionid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SolutionComponentDefinitionId = value;
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutioncomponentdefinitionidunique")]
		public System.Nullable<System.Guid> SolutionComponentDefinitionIdUnique
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutioncomponentdefinitionidunique");
			}
		}
		
		/// <summary>
		/// Solution Component Type
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutioncomponenttype")]
		public System.Nullable<int> SolutionComponentType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("solutioncomponenttype");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("SolutionComponentType");
				this.SetAttributeValue("solutioncomponenttype", value);
				this.OnPropertyChanged("SolutionComponentType");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
		public System.Nullable<System.Guid> SolutionId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Boolean identifier for forcing delete for solution update.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("useforcedeleteforsolutionupdate")]
		public System.Nullable<bool> UseForceDeleteForSolutionUpdate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("useforcedeleteforsolutionupdate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("UseForceDeleteForSolutionUpdate");
				this.SetAttributeValue("useforcedeleteforsolutionupdate", value);
				this.OnPropertyChanged("UseForceDeleteForSolutionUpdate");
			}
		}
		
		/// <summary>
		/// Boolean identifier for always forcing update.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("useforceupdatealways")]
		public System.Nullable<bool> UseForceUpdateAlways
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("useforceupdatealways");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("UseForceUpdateAlways");
				this.SetAttributeValue("useforceupdatealways", value);
				this.OnPropertyChanged("UseForceUpdateAlways");
			}
		}
		
		/// <summary>
		/// Boolean identifier for using sentine rows.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("usesentinelrowinbasesolution")]
		public System.Nullable<bool> UseSentinelRowInBaseSolution
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("usesentinelrowinbasesolution");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("UseSentinelRowInBaseSolution");
				this.SetAttributeValue("usesentinelrowinbasesolution", value);
				this.OnPropertyChanged("UseSentinelRowInBaseSolution");
			}
		}
		
		/// <summary>
		/// The component type of the viewable descendent
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("viewabledescendentcomponenttype")]
		public System.Nullable<int> ViewableDescendentComponentType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("viewabledescendentcomponenttype");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ViewableDescendentComponentType");
				this.SetAttributeValue("viewabledescendentcomponenttype", value);
				this.OnPropertyChanged("ViewableDescendentComponentType");
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public SolutionComponentDefinition(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["solutioncomponentdefinitionid"] = base.Id;
                        break;
                    case "solutioncomponentdefinitionid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}