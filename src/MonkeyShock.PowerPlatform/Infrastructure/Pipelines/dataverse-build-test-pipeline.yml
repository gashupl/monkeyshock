# Pipeline for building Power Platform model-driven app code and all its extensions

trigger:
  branches:
    include:
    - '*'

name: '$(Build.SourceBranchName).$(Build.BuildId)'

pool:
  vmImage: 'windows-latest'

variables:
- group: ADDRESSES
- name: solution
  value: '**/MonkeyShock.PowerPlatform.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: version
  value: '1.0.1.$(Build.BuildId)'
- name: pcfVersion
  value: '1.1.$(Build.BuildId)'

steps:
- task: NuGetToolInstaller@1
  displayName: Install Nuget 

- task: NuGetCommand@2
  displayName: Restore nugets for solution
  inputs:
    restoreSolution: '$(solution)'

- task: MSCRMToolInstaller@12
  displayName: Install MSCRMTools 
  inputs:
    nugetFeed: 'official'
    psFeed: 'official'

- task: PowerPlatformToolInstaller@0
  displayName: Install Power Platform Tools (Including CLI) 
  inputs:
    DefaultVersion: true

- task: PowerShell@2
  displayName: Update MokneyShock solution version 
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "solutions/MonkeyShock/src/Other/Solution.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $solutionXml.SelectSingleNode("/ImportExportXml/SolutionManifest/Version").'#text' = '$(version)'
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline  

- task: PowerShell@2
  displayName: Update configuration variables
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "solutions/MonkeyShock/src/environmentvariabledefinitions/pg_samplesiteurl/environmentvariabledefinition.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $solutionXml.SelectSingleNode("/environmentvariabledefinition/defaultvalue").'#text' = '$(sample-site-url)'
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline  

- task: PowerShell@2
  displayName: Update MonkeyShockControls solution version
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "solutions/MonkeyShockControls/src/Other/Solution.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $solutionXml.SelectSingleNode("/ImportExportXml/SolutionManifest/Version").'#text' = '$(version)'
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline  

- task: PowerShell@2
  displayName: Update PCF DemoComponent control version in manifest
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "src/MonkeyShock.PowerPlatform/Code/Components/MonkeyShock.PowerPlatform.Components.DemoComponent/DemoComponent/ControlManifest.Input.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $nodes = $solutionXml.SelectNodes("/manifest/control"); 
        foreach($node in $nodes) {
            $node.SetAttribute("version", "$(pcfVersion)");
        }
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline  

- task: PowerShell@2
  displayName: Update PCF HappyFace control version in manifest
  inputs:
    targetType: 'inline'
    script: |
        $solutionFullPath = "src/MonkeyShock.PowerPlatform/Code/Components/MonkeyShock.PowerPlatform.Components.HappyFace/HappyFace/ControlManifest.Input.xml"
        $solutionXml = New-Object System.Xml.XmlDocument
        $solutionXml.PreserveWhitespace = $true
        $solutionXml.Load($solutionFullPath)
        $nodes = $solutionXml.SelectNodes("/manifest/control"); 
        foreach($node in $nodes) {
            $node.SetAttribute("version", "$(pcfVersion)");
        }
        $solutionXml.OuterXml | Out-File -FilePath $solutionFullPath -Encoding utf8 -NoNewline

- task: VSBuild@1
  displayName: Build VS solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: Run unit tests
  inputs:
    platform: '$(buildPlatform)'
    codeCoverageEnabled: true
    resultsFolder: '$(Build.SourcesDirectory)/src/TestResults'

- task: MSCRMPackSolution@12
  displayName: Build dataverse Monkeyshock solution
  inputs:
    unpackedFilesFolder: 'solutions/MonkeyShock/src'
    mappingFile: 'src/MonkeyShock.PowerPlatform/Infrastructure/Resources/solution-map.xml'
    outputPath: '$(build.binariesdirectory)/solutions'

# DemoComponent control related steps - start
- task: Npm@1
  displayName: Install missing NPM packages for Demo PCF Control
  inputs:
    command: 'install'
    workingDir: 'src/MonkeyShock.PowerPlatform/Code/Components/MonkeyShock.PowerPlatform.Components.DemoComponent/'

- task: Npm@1
  displayName: Build Demo PCF Control
  inputs:
    command: 'custom'
    workingDir: 'src/MonkeyShock.PowerPlatform/Code/Components/MonkeyShock.PowerPlatform.Components.DemoComponent/'
    customCommand: 'run build'
# DemoComponent control related steps - end

# HappyFace control related steps - start
- task: Npm@1
  displayName: Install missing NPM packages for HappyFace PCF Control
  inputs:
    command: 'install'
    workingDir: 'src/MonkeyShock.PowerPlatform/Code/Components/MonkeyShock.PowerPlatform.Components.HappyFace/'

- task: PowerShell@2
  displayName: Overwrite Webpack config for HappyFace control to include Source mapping file
  inputs:
    targetType: 'inline'
    script: '& Copy-Item "config\HappyFace\webpackConfig.js" -Destination "MonkeyShock.PowerPlatform.Components.HappyFace\node_modules\pcf-scripts"'
    workingDirectory: 'src/MonkeyShock.PowerPlatform/Code/Components'

- task: Npm@1
  displayName: Build HappyFace PCF Control
  inputs:
    command: 'custom'
    workingDir: 'src/MonkeyShock.PowerPlatform/Code/Components/MonkeyShock.PowerPlatform.Components.HappyFace/'
    customCommand: 'run build'
   
# HappyFace control related steps - end

- task: PowerShell@2
  displayName: Create solution for PCF Controls with MSBuild
  inputs:
    targetType: 'inline'
    script: '& "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" /t:build /restore /p:configuration=Release'
    workingDirectory: 'solutions/MonkeyShockControls'

- task: CopyFiles@2
  displayName: Copy MonkeyShock control solutions to artifact folder
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/solutions/MonkeyShockControls/bin/Release/'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/solutions'

- task: CopyFiles@2
  displayName: Copy binaries to artifact folder
  inputs:
    SourceFolder: '$(build.binariesdirectory)'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
- task: PublishBuildArtifacts@1
  displayName: Publish build artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'DataverseSolutionArtifact'

